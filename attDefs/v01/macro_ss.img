13 # attdef file version
#
## Fields
type "num timesteps" : int d < 1 >;
type "load balancing" : int r mapped <<-2 "none"> <-1 "user"> <1 "random"> <2 "equal">>;

type "convergence operator" : void A e < n >;
type "microscale convergence operator" : void A e < n >;

image "linear convergence" : "convergence operator"
{

};

type "convergence type" : int r mapped <<0 "load_residual"> <1 "solution_residual"> <2 "mixed_residual">> d < 2 >;
type "reference value" : int r mapped <<0 "initial"> <1 "load_step"> <2 "iteration">> d < 2 >;
type "epsilon" : double E 1 d < 1e-8 >;
type "iteration cap" : int d < 12 >;

image "nonlinear iteration" : "convergence operator"
{
  R "convergence type";
  R "reference value";
  R "epsilon";
  O "iteration cap";
};


type "track volume" : void e < r >;

image "volume convergence" : "convergence operator"
{
  R "reference value";
  R type "regions" : reference "track volume";
  R "epsilon";
  O "iteration cap";
};

# These should really be called iteration cap 
# and epsilon, but I cannot figure out how to change
# the default values, so I gave them a new name.
type "micro iteration cap" : int d < 200 >;
type "micro solver tolerance" : double E 1 d < 1e-6 >;
type "micro convergence tolerance" : double E 1 d < 1e-6 >;
type "number of attempts" : int d < 5 >;
type "attempt cut factor" : int d < 2 >;
type "previous itr factor" : double d < 1.0 >;
type "oscillation detection" : void A e < n >;
image "iteration only" : "oscillation detection" {
  R "number of attempts";
  R "attempt cut factor";
  R "micro iteration cap";
};
image "previous residual" : "oscillation detection" {
  R "number of attempts";
  R "attempt cut factor";
  R "previous itr factor";
};
image "combined" : "oscillation detection" {
  R "number of attempts";
  R "attempt cut factor";
  R "micro iteration cap";
  R "previous itr factor";
};
image "implicit nonlinear iteration" : "microscale convergence operator"
{
  R "micro convergence tolerance";
  R "micro solver tolerance";
  R "oscillation detection"; 
};
type "serial to GPU dof cutoff" : int d <2000>;
type "history output" : void A e<n>;
type "field output" : void A e<n>;
type "number of frames" : int d<0>;
type "number of iterations" : int d<100000000>;
type "amplitude" : void A e<n>;
type "load time" : double d <5.0>;
type "hold time" : double d <1.0>;
type "energy check epsilon" : double d< 1E-2>;
type "critical time scale factor" : double d<0.8>;
type "viscous damping factor" : double d<0.5>;
image "by frames" : "field output"
{
  R "number of frames";
};
image "by iterations" : "field output"
{
  R "number of iterations";
};
image "by iterations" : "history output"
{
  R "number of iterations";
};
image "Smooth Step" : "amplitude"
{
  R "load time"; 
};
image "Smooth Step and Hold" : "amplitude"
{
  R "load time";
  R "hold time";
};
image "explicit timestep" : "microscale convergence operator"
{
  R "amplitude";
  R "viscous damping factor";
  R "critical time scale factor";
  R "energy check epsilon";
  R "serial to GPU dof cutoff";
  O "history output";
  O "field output";
  R  "micro solver tolerance";
};

image "macro" : "solution strategy" {
  R "num timesteps";
  R "load balancing";
  O "track volume";
  O "convergence operator";
  O "microscale convergence operator";
};
